{"version":3,"sources":["features/counter/counterSlice.ts","lib/LoadingIndicator.tsx","app/store.ts","serviceWorker.ts","i18n.ts","index.tsx"],"names":["counterSlice","createSlice","name","initialState","value","operationInProgress","reducers","increment","state","decrement","incrementByAmount","action","payload","setValue","startOperation","endOperation","actions","incrementAsync","amount","dispatch","setTimeout","loadFromServer","a","fetch","response","json","count","console","error","selectCount","counter","selectInProgress","LoadingIndicator","title","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","i18n","use","Backend","initReactI18next","init","debug","lng","fallbackLng","whitelist","interpolation","escapeValue","format","locale","Intl","NumberFormat","style","currency","Date","DateTimeFormat","Number","valueOf","backend","loadPath","App","lazy","Hello","ReactDOM","render","StrictMode","basename","fallback","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0YAgBaA,EAAeC,YAAY,CACtCC,KAAM,UACNC,aARiC,CACjCC,MAAO,EACPC,oBAAqB,IAOrBC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMJ,OAAS,GAEjBK,UAAW,SAAAD,GACTA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,SAExBC,SAAU,SAACL,EAAOG,GAChBH,EAAMJ,MAAQO,EAAOC,SAEvBE,eAAgB,SAACN,EAAOG,GACtBH,EAAMH,oBAAoBM,EAAOC,UAAW,GAE9CG,aAAc,SAACP,EAAOG,GACpBH,EAAMH,oBAAoBM,EAAOC,UAAW,M,EAKiDZ,EAAagB,QAAjGT,E,EAAAA,UAAWE,E,EAAAA,UAAWC,E,EAAAA,kBAAmBG,E,EAAAA,SAAUC,E,EAAAA,eAAgBC,E,EAAAA,aAMrEE,EAAiB,SAACC,GAAD,OAA8B,SAAAC,GAC1DA,EAASL,EAAe,cACxBM,YAAW,WACTD,EAAST,EAAkBQ,IAC3BC,EAASJ,EAAa,gBACrB,OAGQM,EAAiB,yDAAgB,WAAMF,GAAN,iBAAAG,EAAA,6DAC5CH,EAASL,EAAe,SADoB,kBAGnBS,MAAM,kCAHa,cAGpCC,EAHoC,gBAIvBA,EAASC,OAJc,OAIpCA,EAJoC,OAK1CN,EAASN,EAASY,EAAKC,QALmB,kDAO1CC,QAAQC,MAAM,eAAd,MAP0C,yBAS1CT,EAASJ,EAAa,SAToB,6EAAhB,uDAgBjBc,EAAc,SAACrB,GAAD,OAAsBA,EAAMsB,QAAQ1B,OAClD2B,EAAmB,SAACvB,GAAD,OAAsBA,EAAMsB,QAAQzB,qBAErDL,MAAf,S,gHC3Ee,SAASgC,EAAT,GAA6C,IAAjBC,EAAgB,EAAhBA,MACzC,OACM,6BAAKA,I,oBCHAC,EAAQC,YAAe,CAClCC,QAAS,CACPN,QAASO,O,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCXNC,IAEKC,IAAIC,KAEJD,IAAIE,KAEJC,KAAK,CACFC,OAAO,EAEPC,IAAK,KACLC,YAAa,KACbC,UAAW,CAAC,KAAM,MAElBC,cAAe,CACXC,aAAa,EACbC,OAAQ,SAAUlD,EAAOkD,EAAQC,GAE7B,MAAe,SAAXD,EAA0B,IAAIE,KAAKC,aAAaF,EAAQ,CACxDG,MAAO,WACPC,SAAU,QACXL,OAAOlD,GAENA,aAAiBwD,KAAa,IAAIJ,KAAKK,eAAeN,GAAQD,OAAOlD,GACrEA,aAAiB0D,OAAe,IAAIN,KAAKC,aAAaF,GAAQD,OAAOlD,EAAM2D,WAC1D,kBAAV3D,EAA2B,IAAIoD,KAAKC,aAAaF,GAAQD,OAAOlD,GACpEA,IAIf4D,QAAS,CACLC,SAAU,iDAIPtB,EAAf,EAAeA,I,eC5BTuB,EAAMC,gBAAK,kBAAM,gCACjBC,EAAQD,gBAAK,kBAAM,gCAEzBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrC,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAQsC,SAAS,kBAAjB,SACE,cAAC,WAAD,CAAUC,SAAU,cAACzC,EAAD,CAAkBC,MAAM,eAA5C,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,cAAC,IAAD,CAAOS,KAAK,SAASC,UAAWR,eAM1CS,SAASC,eAAe,SF2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACLD,QAAQC,MAAMA,EAAM0D,c","file":"static/js/main.4ba54247.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ntype Operation = 'LOAD' | 'ADD_ASYNC'\r\n\r\ninterface CounterState {\r\n  value: number;\r\n  operationInProgress: Partial<Record<Operation,boolean>>;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n  operationInProgress: {\r\n  }\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n    setValue: (state, action: PayloadAction<number>) => {\r\n      state.value = action.payload;\r\n    },\r\n    startOperation: (state, action: PayloadAction<Operation>) => {\r\n      state.operationInProgress[action.payload] = true;\r\n    },\r\n    endOperation: (state, action: PayloadAction<Operation>) => {\r\n      state.operationInProgress[action.payload] = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount, setValue, startOperation, endOperation } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  dispatch(startOperation('ADD_ASYNC'));\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n    dispatch(endOperation('ADD_ASYNC'));\r\n  }, 1000);\r\n};\r\n\r\nexport const loadFromServer = (): AppThunk => async dispatch => {\r\n  dispatch(startOperation('LOAD'));\r\n  try {\r\n    const response = await fetch(\"/react-showcase/api/users.json\");\r\n    const json = await response.json();\r\n    dispatch(setValue(json.count));\r\n  } catch (error) {\r\n    console.error(\"Fetch failed\", error);\r\n  } finally {\r\n    dispatch(endOperation('LOAD'));\r\n  }\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\nexport const selectInProgress = (state: RootState) => state.counter.operationInProgress;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from \"react\";\r\n\r\ntype Props = Readonly<{ title: string }>;\r\n\r\nexport default function LoadingIndicator({ title }: Props) {\r\n  return (\r\n        <h1>{title}</h1>\r\n  );\r\n}","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\n// https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// adapted from https://www.robinwieruch.de/react-internationalization\r\n\r\nimport i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport Backend from 'i18next-xhr-backend';\r\n\r\ni18n\r\n    // learn more: https://github.com/i18next/i18next-xhr-backend\r\n    .use(Backend)\r\n    // connect with React\r\n    .use(initReactI18next)\r\n    // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n        debug: true,\r\n\r\n        lng: 'en',\r\n        fallbackLng: 'en',\r\n        whitelist: ['en', 'de'],\r\n\r\n        interpolation: {\r\n            escapeValue: false, // not needed for react as it escapes by default\r\n            format: function (value, format, locale) {\r\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\r\n                if (format === 'euro') return new Intl.NumberFormat(locale, {\r\n                    style: 'currency',\r\n                    currency: 'EUR'\r\n                }).format(value);\r\n                // if (format === 'number') return new Intl.NumberFormat(locale).format(value.valueOf());\r\n                if (value instanceof Date) return new Intl.DateTimeFormat(locale).format(value);\r\n                if (value instanceof Number) return new Intl.NumberFormat(locale).format(value.valueOf());\r\n                if (typeof value === 'number') return new Intl.NumberFormat(locale).format(value);\r\n                return value;\r\n            }\r\n        },\r\n\r\n        backend: {\r\n            loadPath: '/react-showcase/locales/{{lng}}/{{ns}}.json',\r\n        },\r\n    });\r\n\r\nexport default i18n;","import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/main.css\";\r\nimport LoadingIndicator from \"./lib/LoadingIndicator\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./i18n\";\r\n\r\n// https://reactjs.org/docs/code-splitting.html#route-based-code-splitting\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nconst App = lazy(() => import(\"./App\"));\r\nconst Hello = lazy(() => import(\"./Hello\"));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router basename=\"/react-showcase\">\r\n        <Suspense fallback={<LoadingIndicator title=\"Loading...\" />}>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/hello\" component={Hello} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}