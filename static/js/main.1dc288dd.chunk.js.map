{"version":3,"sources":["features/counter/counterSlice.ts","common/components/LoadingIndicator.tsx","common/components/LoadingIndicator.module.scss","app/store.ts","serviceWorker.ts","i18n.ts","SwitchLanguage.tsx","Nav.tsx","App.tsx","index.tsx"],"names":["counterSlice","createSlice","name","initialState","value","operationInProgress","reducers","increment","state","decrement","incrementByAmount","action","payload","setValue","startOperation","endOperation","configureBackendUrl","backendApiUrl","actions","incrementAsync","amount","dispatch","a","Promise","resolve","setTimeout","initFromBackend","getState","selectIsConfigured","process","all","loadFromServer","console","log","endpoint","baseUrl","counter","Error","promise","loadFromServerFetch","result","url","fetch","response","json","count","error","selectCount","selectInProgress","undefined","LoadingIndicator","title","className","styles","loading","module","exports","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","i18n","use","Backend","initReactI18next","init","debug","lng","fallbackLng","whitelist","interpolation","escapeValue","format","locale","Intl","NumberFormat","style","currency","Date","DateTimeFormat","Number","valueOf","backend","loadPath","SwitchLanguage","useTranslation","t","language","testid","label","text","onClick","changeLanguage","Nav","exact","activeClassName","to","Counter","lazy","Hello","App","id","basename","path","component","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","getTTFB","getFCP","getLCP","getFID","getCLS"],"mappings":"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","file":"static/js/main.1dc288dd.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\nimport axios from 'axios';\n\ntype Operation = 'LOAD' | 'ADD_ASYNC'\n\ntype AppState = {\n  value: number;\n}\n\ntype UIState = {\n  operationInProgress: Partial<Record<Operation,boolean>>;\n}\n\ntype ConfigState = {\n  backendApiUrl?: string;\n}\n\ntype CounterState = AppState & UIState & ConfigState;\n\nconst initialState: CounterState = {\n  value: 0,\n  operationInProgress: {\n  }\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n    setValue: (state, action: PayloadAction<number>) => {\n      state.value = action.payload;\n    },\n    startOperation: (state, action: PayloadAction<Operation>) => {\n      state.operationInProgress[action.payload] = true;\n    },\n    endOperation: (state, action: PayloadAction<Operation>) => {\n      state.operationInProgress[action.payload] = false;\n    },\n    configureBackendUrl: (state, action: PayloadAction<string>) => {\n      state.backendApiUrl = action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount, setValue, startOperation, endOperation, configureBackendUrl } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => async dispatch => {\n  dispatch(startOperation('ADD_ASYNC'));\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  dispatch(incrementByAmount(amount));\n  dispatch(endOperation('ADD_ASYNC'));\n};\n\nexport const loadBackendConfig = (): AppThunk => async dispatch => {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  dispatch(configureBackendUrl(process.env.PUBLIC_URL +'/api/'));\n};\n\n// composed async action creator\nexport const initFromBackend = (): AppThunk => async (dispatch, getState) => {\n  if (!selectIsConfigured(getState())) {\n    await dispatch(loadBackendConfig());\n  }\n  // makes tests indeterministic, so we deactivate the second call for now\n  await Promise.all([\n    dispatch(loadFromServer()),\n    // dispatch(loadFromServer('users2.json'))\n  ])\n  console.log('all initialized')\n}\n\nexport const loadFromServer = (endpoint: string = 'users.json' ): AppThunk => async (dispatch, getState) => {\n  const baseUrl = getState().counter.backendApiUrl;\n  if (!baseUrl) {\n    throw new Error('backend not not configured');\n  }\n  const url = baseUrl + endpoint;\n\n  const promise = dispatch(loadFromServerFetch(url));\n  console.log(promise)\n  const result = await promise;\n  console.log(promise)\n  console.log(result)\n  // await dispatch(loadFromServerAxios(url));\n}\n\nexport const loadFromServerFetch = (url: string): AppThunk => async dispatch => {\n  dispatch(startOperation('LOAD'));\n  try {\n    const response = await fetch(url);\n    const json = await response.json();\n    dispatch(setValue(json.count));\n    return json.count;\n  } catch (error) {\n    console.error(\"Fetch failed\", error);\n  } finally {\n    dispatch(endOperation('LOAD'));\n  }\n};\n\ntype BackendCountResponse = {\n  count: number,\n  nada: string // does not exist in response\n}\n\nexport const loadFromServerAxios = (url: string): AppThunk => async dispatch => {\n  dispatch(startOperation('LOAD'));\n  try {\n    const {data} = await axios.get<BackendCountResponse>(url)\n    dispatch(setValue(data.count));\n    // this is not checked at runtime\n    console.log(data.nada)\n  } catch (error) {\n    console.error(\"Fetch failed\", error);\n  } finally {\n    dispatch(endOperation('LOAD'));\n  }\n\n}\n\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\nexport const selectInProgress = (state: RootState) => state.counter.operationInProgress;\nexport const selectIsConfigured = (state: RootState) => state.counter.backendApiUrl !== undefined;\n\nexport default counterSlice.reducer;\n","import React from \"react\";\n\nimport styles from './LoadingIndicator.module.scss';\n\nexport function LoadingIndicator({ title }: { title: string }) {\n  return (\n        <div className={styles.loading}>{title}</div>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"LoadingIndicator_loading__S3DGW\"};","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// adapted from https://www.robinwieruch.de/react-internationalization\n\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-xhr-backend';\n\ni18n\n    // learn more: https://github.com/i18next/i18next-xhr-backend\n    .use(Backend)\n    // connect with React\n    .use(initReactI18next)\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        debug: process.env.NODE_ENV !== 'production',\n\n        lng: 'en',\n        fallbackLng: 'en',\n        whitelist: ['en', 'de'],\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n            format: function (value, format, locale) {\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\n                if (format === 'euro') return new Intl.NumberFormat(locale, {\n                    style: 'currency',\n                    currency: 'EUR'\n                }).format(value);\n                // if (format === 'number') return new Intl.NumberFormat(locale).format(value.valueOf());\n                if (value instanceof Date) return new Intl.DateTimeFormat(locale).format(value);\n                if (value instanceof Number) return new Intl.NumberFormat(locale).format(value.valueOf());\n                if (typeof value === 'number') return new Intl.NumberFormat(locale).format(value);\n                return value;\n            }\n        },\n\n        backend: {\n            loadPath: process.env.PUBLIC_URL + '/locales/{{lng}}/{{ns}}.json',\n        },\n    });\n\nexport default i18n;","import { useTranslation } from \"react-i18next\";\nimport { AriaButton } from \"zeigermann-component-lib\";\n\nexport function SwitchLanguage() {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <div className=\"flex justify-end\">\n      {i18n.language !== \"de\" && (\n        <AriaButton\n          testid=\"language:switch:de\"\n          label=\"Change Language\"\n          text={t(\"de\")}\n          onClick={() => i18n.changeLanguage(\"de\")}\n        />\n      )}\n      {i18n.language !== \"en\" && (\n        <AriaButton\n          testid=\"language:switch:en\"\n          label=\"Change Language\"\n          text={t(\"en\")}\n          onClick={() => i18n.changeLanguage(\"en\")}\n        />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { NavLink } from \"react-router-dom\";\n\nexport function Nav() {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"flex justify-end\">\n      <nav>\n          <ul>\n            <li>\n              <NavLink exact activeClassName=\"bg-gray-300\" className={`bg-gray-100`} to=\"/\">{t(\"home\")}</NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"bg-gray-300\" className={`bg-gray-100`} to=\"/hello\">{t(\"hello\")}</NavLink>\n            </li>\n          </ul>\n        </nav>\n    </div>\n  );\n}\n","import React, { lazy } from \"react\";\n\nimport { SwitchLanguage } from \"./SwitchLanguage\";\nimport { Nav } from \"./Nav\";\n\n// https://reactjs.org/docs/code-splitting.html#route-based-code-splitting\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst Counter = lazy(() => import(\"./features/counter/Counter\"));\nconst Hello = lazy(() => import(\"./features/hello/Hello\"));\n\nfunction App() {\n  return (\n    <div id=\"cnt-app\" className=\"p-6 max-w-sm mx-auto space-x-5\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Nav />\n        <SwitchLanguage />\n        <Switch>\n          <Route exact path=\"/\" component={Counter} />\n          <Route path=\"/hello\" component={Hello} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport \"zeigermann-component-lib/dist/index.esm.css\";\n\nimport { LoadingIndicator } from \"./common/components/LoadingIndicator\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {getCLS, getFID, getFCP, getLCP, getTTFB} from 'web-vitals';\n\nimport \"./i18n\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Suspense fallback={<LoadingIndicator title=\"Loading...\" />}>\n        <App />\n      </Suspense>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// https://web.dev/vitals/\n\ngetTTFB(console.log); // Time to First Byte (TTFB): https://web.dev/time-to-first-byte/, is the server slow?\ngetFCP(console.log); // First Contentful Paint (FCP): https://web.dev/fcp/, first time user sees anything\ngetLCP(console.log); // Largest Contentful Paint (LCP): https://web.dev/lcp/, first time user sees app\ngetFID(console.log); // First Input Delay (FID): https://web.dev/fid/, once user can interact how long till app responds\ngetCLS(console.log); // Cumulative Layout Shift (CLS): https://web.dev/cls/, is the app \"jumpy\"?\n"],"sourceRoot":""}